1. 
id_rsa_homework (private):
-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----



id_rsa_homework.pub (public):
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDHhICkj6Wd+eKrjjb+hah1PcNc45YzYMT4Z6MVn85L0WfhzJ7kFnXqd00QftvfQIKbea9IJPxYYcuECS4XOX7jKz1KuS+36zogwCYrDHSj4xj6IGQM+nD7sc7vB/HjT74r6trgG5GzCa/pUNPASewL11kHqGiSWNZkqMOiN8B01T0S5Cypyg09fCNm1bh9nGeqUaB6APWeRBJS5ntIwT0LEbRXtBTBKp0FfCEhJmXmUn2NUoWLQFJQbaFd3CPGeHxYgMz4YwfsgCX0vI+2J3M8mtIZBZP3RmgZKpIxtOTsAa+ayoV2cU+RAOzemGqqi8BAN2EKkJUOXnl+nFwq+uQJUwm4IwyYfz0edvi6aoocfKfRJfdXVa9b8nIhz8e+ZlQArTk+/xE1bszqmtN2sO51C4S9lIXIT+hHQhbRmZq5gAyVsEStQQLpEfdd0cHH+EkyorQE7phr+cZJFnIYZnauQXlsmuCbFuzkkKeA3CrpsLaQI0eqZejRdYAFYV/hB/0= noahlee@Noahs-MacBook-Pro.local

2/3.
Private Key:
Expected: version, modulus (n), publicExponent (e), privateExponent (d), prime1 (p), prime2 (q), exponent1 (d mod p-1), exponent2 (d mod q-1), coefficient (inverse of q) mod p, optionalPrimeInfo

4. Using Lapo Luchini's ASN.1 decoder:
- I pasted the private key into the decoder (without the start and end tags).
- Hovering over the hexadecimal, I can see how the ASN is divided and represented - I can also convert the hexadecimal to get the decimal value of each component like the prime numbers.

5. change offset - 4 base64 chars is 3 bytes
1) SEQUENCE (9)
Hex Value: 30 82 06 E4
Offset: 0

2) Version (0)
Hex Value: 02 01 00
Offset: 4

3) MODULUS (4527...)
Hex Value
Offset: 7

4) publicExponent (65537)
Hex Value: 02 03 01 00 01
Offset: 396

5) privateExponent (2954...)
Hex Value
Offset: 401

6) prime1 (2317...)
Hex Value
Offset: 790

7) prime2 (1953...)
Hex Value: 02 81 C1 00 CF 84 41 F4 6F F0 26 01 30 BA D1 E7 4A 41 9D C9 1E D3 35 EB C4 93 76 00 CE B9 4A 31 3B F9 B4 0E F2 72 78 F9 54 4C 51 10 9D F3 8A DD 2C D3 C7 91 FF 87 C2 FC 57 48 33 B7 E8 DF C5 B7 98 D6 29 A1 B2 AC C0 09 C3 E7 0D 68 0F FE 9B 0C 26 1D 6B 4B 0D 43 5D 30 9C BE A6 67 30 21 E7 07 8A 06 6B A4 94 8F E0 0C F4 FC 64 29 E9 DE 23 46 C2 48 CF 60 A1 50 F6 35 34 A6 A1 1C A6 45 37 EE 11 0E AD 23 A0 4D E9 52 48 2E F5 C0 6A 7F 72 3D 0A 8A 8C FF DC 33 21 A9 BD 0D CC FC D5 0D 57 3C CF CF 75 2B 29 1B 65 2C D7 11 4D AD 2E B4 9D D3 11 55 E4 41 3D E0 E0 0D 22 10 2C C6 68 33 D3 A2 11 62 57 A1
Offset: 986

8) exponent1 (1302...)
Hex Value
Offset: 1182

9) exponent2 (1728...)
Hex Value
Offset: 1378

10) coefficient (7663...)
Hex Value
Offset: 1573

DER encoding: data type (colored blue on the tool) is at the front of the encoding. 30 (hex) represents 'SEQUENCE' and 02 (hex) represents integer.
After the data type, the length of the value in bytes will be represented in be represented in hex (not including the bytes before it) - followed by the value of that object in hex. The name is not necessary as the variables are assumed to always be listed in the same order.

6.
Public Key:
cat id_rsa_homework.pub | cut -d " " -f2 | \
  base64 -d | hexdump -ve '/1 "%02x "' -e '2/8 "\n"'
00 00 00 07 73 73 68 2d 72 73 61 00 00 00 03 01
00 01 00 00 01 81 00 c7 84 80 a4 8f a5 9d f9 e2
ab 8e 36 fe 85 a8 75 3d c3 5c e3 96 33 60 c4 f8
67 a3 15 9f ce 4b d1 67 e1 cc 9e e4 16 75 ea 77
4d 10 7e db df 40 82 9b 79 af 48 24 fc 58 61 cb
84 09 2e 17 39 7e e3 2b 3d 4a b9 2f b7 eb 3a 20
c0 26 2b 0c 74 a3 e3 18 fa 20 64 0c fa 70 fb b1
ce ef 07 f1 e3 4f be 2b ea da e0 1b 91 b3 09 af
e9 50 d3 c0 49 ec 0b d7 59 07 a8 68 92 58 d6 64
a8 c3 a2 37 c0 74 d5 3d 12 e4 2c a9 ca 0d 3d 7c
23 66 d5 b8 7d 9c 67 aa 51 a0 7a 00 f5 9e 44 12
52 e6 7b 48 c1 3d 0b 11 b4 57 b4 14 c1 2a 9d 05
7c 21 21 26 65 e6 52 7d 8d 52 85 8b 40 52 50 6d
a1 5d dc 23 c6 78 7c 58 80 cc f8 63 07 ec 80 25
f4 bc 8f b6 27 73 3c 9a d2 19 05 93 f7 46 68 19
2a 92 31 b4 e4 ec 01 af 9a ca 85 76 71 4f 91 00
ec de 98 6a aa 8b c0 40 37 61 0a 90 95 0e 5e 79
7e 9c 5c 2a fa e4 09 53 09 b8 23 0c 98 7f 3d 1e
76 f8 ba 6a 8a 1c 7c a7 d1 25 f7 57 55 af 5b f2
72 21 cf c7 be 66 54 00 ad 39 3e ff 11 35 6e cc
ea 9a d3 76 b0 ee 75 0b 84 bd 94 85 c8 4f e8 47
42 16 d1 99 9a b9 80 0c 95 b0 44 ad 41 02 e9 11
f7 5d d1 c1 c7 f8 49 32 a2 b4 04 ee 98 6b f9 c6
49 16 72 18 66 76 ae 41 79 6c 9a e0 9b 16 ec e4
90 a7 80 dc 2a e9 b0 b6 90 23 47 aa 65 e8 d1 75
80 05 61 5f e1 07 fd 

First 4 bytes: 7 (length of the next field in bytes)
algorithm: "ssh-rsa" - 73 73 68 2d 72 73 61
Next bytes: 00 00 00 03 (length of next field is 3 bytes)
exponent: 01 00 01 (RSA exponent is 65537)
Next bytes: 00 00 01 81 (length of next field is 385 bytes)
Public key mod: [REST OF THE HEX] - 4527806933753269214160381330150367238564934400203482335735911249575663761560392470021685970450829393024194904079440423766524476379046936982274803369506203132541166128751958486310916040756187717004887726307331661266652885204585359494746756632659554983275378870030472128361855543653981351016296970721171179523906081190556228204370615925738174901579701056480852145970238112416856006215776758124633680722896147621829097908991744653725951395603170760493043334749973012350773993682831277319717687246697443544452740766338706946747162087677575722577742120205112902325175829146318901910237591987427370998248592152492255816508745896839617710987275781166023962036213089376632594847995541422889849875518339305371320604132904834801249490530002604009578435048645252386156772444291550499121576186478870272392965856748650548900911905081172186799529756728715600172278025370780985635802081643477463590876995634808074058378961328380210384537597
Got by cross referencing with https://www.thedigitalcatonline.com/blog/2018/04/25/rsa-keys/


8. Sanity Check:
e = 65537
d = 2954470539008877499341662682187929026198801511974941156986290319618744908973078163297181421797751928884243570472453580144828916610060930666798902776959019649358231660435307577530250294747968499168363195260795141102081938185893286440229951029785513668687738254695562965916450104045331011411277959868778923679147956971374132824689946434048969459864722766976626351073000940528166230523391020102260321992674837983122503974550604519156149739560461943661206725471837980339557403049772850484161949335797262138766639610597079141366325005885051226748852822828311347132330479842507592417075001859315413171216995580439263465090541552956099059804330881351239818567183122644184821753455692563599187030646116931425766361051026112493085729831050851213375096645116977480687467830742512668550086498031022740549754867160150062713305466157416743936415246989864064160438056032718169505802121243412803003027330984590107144794232753330051448840705
lambda(n) = 
from math import gcd
p = 2317403276847940915050643218666135865433778183939443057387772916785166902522274624431601517079294985918096430019631095445826037603398837835594918646592918568503083650910897090513896765160086562950357768125887814529601177918501761214040957194855978595118337763421827804494394658173602529050394858191992397875233236537992905700055131060826128096134264383904960544079566904644721102580453755028647864499764250606306875583853066567198066620986881737190013237064114909
q = 1953827794665005335092465131904381960469940545505230211908433490417310771361199208619066156837972394974714690582675787820166301510350274842252194130930829003935798716213559541899691010649544882570299101568781146643578783301675238404720619100727010331175296631717473651209512708969031210408493220417061580045746692095091397060934982200495753031389193587668637169563893348008790544429949496973006326581398121636688918200231463917569257544832128137243899861221398433
def lcm(p, q):
    return abs(p*q) // gcd(p, q)
lambda_n = lcm(p - 1, q - 1)
lambda_n = 1131951733438317303540095332537591809641233600050870583933977812393915940390098117505421492612707348256048726019860105941631119094761734245568700842376550783135291532187989621577729010189046929251221931576832915316663221301146339873686689158164888745818844717507618032090463885913495337754074242680292794880976520297639057051092653981434543725394925264120213036492559528104214001553944189531158420180724036905457274477247936163431487848900792690123260833687493252019885730542471256794152334169044904410183502830416359412635188721299975459775977267384359746264448734083799574900838581498772064312283978576344869573190293364489312646632660841894562038101191892179940725044758592060732157424629680135948756255285994635291713587807136725025552823103726448374519540847578407379798235775544027320569926133716880756360735082870864635834819275804267147442256505929147476118357459661920919876586627716870977059842271723616778024756064

>>> e = 65537
>>> d = 2954470539008877499341662682187929026198801511974941156986290319618744908973078163297181421797751928884243570472453580144828916610060930666798902776959019649358231660435307577530250294747968499168363195260795141102081938185893286440229951029785513668687738254695562965916450104045331011411277959868778923679147956971374132824689946434048969459864722766976626351073000940528166230523391020102260321992674837983122503974550604519156149739560461943661206725471837980339557403049772850484161949335797262138766639610597079141366325005885051226748852822828311347132330479842507592417075001859315413171216995580439263465090541552956099059804330881351239818567183122644184821753455692563599187030646116931425766361051026112493085729831050851213375096645116977480687467830742512668550086498031022740549754867160150062713305466157416743936415246989864064160438056032718169505802121243412803003027330984590107144794232753330051448840705
>>> lambda_n = 1131951733438317303540095332537591809641233600050870583933977812393915940390098117505421492612707348256048726019860105941631119094761734245568700842376550783135291532187989621577729010189046929251221931576832915316663221301146339873686689158164888745818844717507618032090463885913495337754074242680292794880976520297639057051092653981434543725394925264120213036492559528104214001553944189531158420180724036905457274477247936163431487848900792690123260833687493252019885730542471256794152334169044904410183502830416359412635188721299975459775977267384359746264448734083799574900838581498772064312283978576344869573190293364489312646632660841894562038101191892179940725044758592060732157424629680135948756255285994635291713587807136725025552823103726448374519540847578407379798235775544027320569926133716880756360735082870864635834819275804267147442256505929147476118357459661920919876586627716870977059842271723616778024756064
>>> e * d % lambda_n
1

Check is correct!